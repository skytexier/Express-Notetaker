const util = require("util");
// UUID for creating unique ID's
const uuidv1 = require("uuid/v1");
const fs = require("fs");
const path = require("path");
//Recreating functions to write and read data from in class work
const readFromFile = util.promisify(fs.readFile);
const writeFile = util.promisify(fs.writeFile);

// Helper class to contain read, write, getnotes, createnotes and delete notes function
class Helper {
  //Basic read function calling readFromFile
  read() {
    return readFromFile("db/db.json", 'utf8')
}
  //Basic write function calling writeFile
  write(note) {
    return writeFile("db/db.json", JSON.stringify(note))
  }
  //Function to get notes from db, first reading db from path, then passing notes to create note array
  getNote(){
    return this.read().then((notes) => {
      let parsednotes;

      // Try to run code block if parsednotes is not an array, putting notes into an array if they arent already
      try {
        parsednotes = [].concat(JSON.parse(notes));
      } catch (err) {
        parsednotes = [];
      } return parsednotes;
    })
  }

  //Function to create notes, passing note to be defined by title, text and id
  createNote(note){
    const {title, text} = note;
    // If note doesnt have title or text, throw custom  error 
    if (title && text === null) {
        throw new Error("Notes need a title and text")
      }
    // Creating new note with id generated by uuid
    const newNote = {title, text, id: uuidv1()};
    // Returning this note after reading notes, adding new note to notes array then updating notes db with .write()
      return this.getNote().then((notes) => [...notes, newNote]).then((updateDB) => this.write(updateDB)).then(() => newNote);
}}

module.exports = new Helper();

// Other attempts at creating functions to read/write and create/delete notes

// // Write to file helper functions (not sure if it will be used)
// const writeToFile = (destination, content) =>
//   fs.writeFile(destination, JSON.stringify(content, null, 4), (err) =>
//     err ? console.log(err) : console.info(`\nData written to ${destination}`)
//   );

// // Read and append helper functions
// const readAndAppend = (content, file) => {
//   fs.readFile(file, `utf8`, (err, data) => {
//     if (err) {
//       console.log(err);
//     } else {
//       const parsedData = JSON.parse(data);
//       parsedData.push(content);
//       writeToFile(file, parsedData);
//     }
//   });
// };

// // DB function to update notes
// function updateData(id, notesArr) {
//   const deleteNote = id;
//   for (let i = 0; i < notesArr.length; i++) {
//     if (deleteNote === notesArr[i].id) {
//       notesArr.splice(i, 1);
//       writeToFile(__dirname, "../db/db.json");
//       JSON.stringify({ notes: notesArr }, null, 2),
//         (err) => {
//           if (err) {
//             console.log(err);
//           }
//         };
//     }
//   }
// }

// // Function to create new notes
// function createNote(body, notesArr) {
//   const newNote = body;
//   notesArr.push(newNote);
//   writeToFile(__dirname, "../db/db.json");
//   return newNote;
// }